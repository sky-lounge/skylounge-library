---
name: Development
on:
  push:
    branches:
      - main
    paths: ((build_paths))
    ignore_paths:
      - development-version.txt
      - production-version.txt
  workflow_dispatch:
jobs:
  unit-test:
    name: Unit Test
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
      - skylounge-step: unit-test
  build:
    needs: unit-test
    name: Build Container Image
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    env:
      REGISTRY: ((registry_url))
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
      - name: Set image name
        run: |
          echo "IMAGE_NAME=${{ env.REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }}" >> $GITHUB_ENV
      - skylounge-step: cloud-auth
      - skylounge-step: build-container-image
      - skylounge-step: push-container-image
      - skylounge-step: upload-sboms
  # image-scan:
  #   needs: build
  #   name: Image scans
  #   runs-on: ubuntu-latest
  #   steps:
  #   # SBOM scan
  #   # ClamAv scan
  # deploy:
  #   needs: build
  #   name: Deploy to development
  #   runs-on: ubuntu-latest
  #   env:
  #     REGISTRY: ((registry_url))
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v3
  #     - name: Set image and service name
  #       run: |
  #         sed -i -e 's%${IMAGE_NAME}%'"$IMAGE_NAME"'%g' ./service.yaml
  #         sed -i -e 's%${GCP_PROJECT}%'"$GCP_PROJECT"'%g' ./service.yaml
  #       env:
  #         IMAGE_NAME: "${{ env.REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }}"
  #         GCP_PROJECT: ((gcp_project))
  #     - id: auth
  #       name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v0
  #       with:
  #         credentials_json: "${{ secrets.GOOGLE_CREDENTIALS_DEV }}"
  #     - id: deploy
  #       uses: google-github-actions/deploy-cloudrun@v0
  #       with:
  #         metadata: ./service.yaml
  # configure-access:
  #   needs: deploy
  #   name: Map Domain
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: public-skylounge-library/terraform/gcp/cloud-run/domain-mapping
  #   steps:
  #     - name: Checkout terraform
  #       uses: actions/checkout@v3
  #       with:
  #         repository: sky-lounge/public-skylounge-library
  #         ref: main
  #         path: public-skylounge-library
  #     - uses: hashicorp/setup-terraform@v2
  #     - id: auth
  #       name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v0
  #       with:
  #         credentials_json: "${{ secrets.GOOGLE_CREDENTIALS_DEV }}"
  #     - name: Prepare Backend Config
  #       run: |
  #         cat << EOF > config.gcs.tfbackend
  #         bucket = "$TF_STATE_BUCKET"
  #         prefix = "${REPO_NAME}"
  #         EOF
  #       env:
  #         TF_STATE_BUCKET: ((tf_state_bucket))
  #         REPO_NAME: "${{ github.event.repository.name }}"
  #     - name: Terraform Init
  #       run: terraform init -backend-config=config.gcs.tfbackend
  #     - name: Prepare Terraform Vars File
  #       run: |
  #         echo "gcp_project = \"$GCP_PROJECT\"" > terraform.tfvars
  #         echo "dns_zone_name = \"$DNS_ZONE_NAME\"" >> terraform.tfvars
  #         echo "cloud_run_domain = \"$CLOUD_RUN_DOMAIN\"" >> terraform.tfvars
  #         echo "cloud_run_location = \"$CLOUD_RUN_LOCATION\"" >> terraform.tfvars
  #         echo "cloud_run_service_name = \"$CLOUD_RUN_SERVICE_NAME\"" >> terraform.tfvars
  #         if [ -n "$CLOUD_RUN_INVOKER" ]; then
  #           echo "cloud_run_invoker = \"$CLOUD_RUN_INVOKER\"" >> terraform.tfvars
  #         fi
  #       env:
  #         GCP_PROJECT: ((gcp_project))
  #         DNS_ZONE_NAME: ((dns_zone_name))
  #         CLOUD_RUN_DOMAIN: ((cloud_run_domain))
  #         CLOUD_RUN_LOCATION: ((cloud_run_location))
  #         CLOUD_RUN_SERVICE_NAME: "${{ github.event.repository.name }}"
  #         CLOUD_RUN_INVOKER: ((_cloud_run_invoker))
  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve
  # integration-test: skylounge-job
  # artifact-version:
  #   needs: integration-test
  #   name: Update artifact version
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v3
  #     - name: Update Artifact Version
  #       run: |
  #         git config user.name "GitHub Actions Bot"
  #         git config user.email "<>"
  #         echo "${{ github.sha }}" > development-version.txt
  #         git add development-version.txt
  #         git commit -m "update development version: ${{ github.sha }}"
  #         git pull --rebase
  #         git push
